using OpenNetcode.Client.Components;
using OpenNetcode.Shared.Systems;
using OpenNetcode.Shared.Time;
using Unity.Entities;

//<using>

namespace Client.Generated
{
    [DisableAutoCreation]
    [UpdateInGroup(typeof(TickSimulationSystemGroup), OrderLast = true)]
    public partial class TickSavePredictionSystem : SystemBase
    {
        protected override void OnUpdate()
        {
            int tick = GetSingleton<TickData>().Value;
            int index = tick % TimeConfig.TicksPerSecond;
            Entity clientEntity = GetSingleton<ClientData>().LocalPlayer;
            
            //<template:predicted>
            //var ##TYPELOWER##Prediction = EntityManager.GetComponentData<##TYPE##>(clientEntity);
            //var ##TYPELOWER##Predictions = EntityManager.GetBuffer<Prediction<##TYPE##>>(clientEntity);
            //
            //##TYPELOWER##Predictions[index] = new Prediction<##TYPE##>()
            //{
            //    Tick = tick,
            //    Value = ##TYPELOWER##Prediction
            //};
            //</template>
            
            
        }
    }
}
