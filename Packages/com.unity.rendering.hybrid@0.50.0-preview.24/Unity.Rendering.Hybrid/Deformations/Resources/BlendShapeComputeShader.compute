#pragma kernel BlendShapeComputeKernel

#define NBR_THREAD_GROUPS 1024

#define NBR_THREADS_X 128
#define NBR_THREADS_Y 1
#define NBR_THREADS_Z 1

#define THREAD_COUNT NBR_THREADS_Y * NBR_THREADS_X * NBR_THREADS_Z
#define STEP_SIZE THREAD_COUNT * NBR_THREAD_GROUPS

struct VertexData
{
	float3 Position;
	float3 Normal;
	float3 Tangent;
};

struct BlendShapeVertexDelta
{
	int   BlendShapeIndex;
	float3 Position;
	float3 Normal;
	float3 Tangent;
};

uniform StructuredBuffer<BlendShapeVertexDelta>	_BlendShapeVertexDeltas;
uniform StructuredBuffer<uint2>     _BlendShapeOffsetAndCount;
uniform StructuredBuffer<float>     _BlendShapeWeights;
uniform RWStructuredBuffer<VertexData> _DeformedMeshData : register(u1);

uint g_SharedMeshStartIndex;
uint g_VertexCount;
uint g_BlendShapeVertexStartIndex;
uint g_BlendShapeWeightstartIndex;
uint g_DeformedMeshStartIndex;
uint g_InstanceCount;
uint g_BlendShapeCount;

[numthreads(NBR_THREADS_X, NBR_THREADS_Y, NBR_THREADS_Z)]
void BlendShapeComputeKernel(uint id : SV_GroupIndex, uint3 groupId : SV_GroupID)
{
	const uint totalNumVertices = g_VertexCount * g_InstanceCount;
	const uint start = id + groupId[0] * THREAD_COUNT;

	for (uint i = start; i < totalNumVertices; i += STEP_SIZE)
	{
		const uint instanceCnt = i / g_VertexCount;
		const uint sharedMeshVertexIndex = g_SharedMeshStartIndex + (i % g_VertexCount);
		const uint deformedMeshVertexIndex = g_DeformedMeshStartIndex + i;

		const uint blendShapeWeightOffset = g_BlendShapeWeightstartIndex + instanceCnt * g_BlendShapeCount;
		const uint2 offsetAndCount = _BlendShapeOffsetAndCount[sharedMeshVertexIndex];
		const uint blendShapeVertexOffset = g_BlendShapeVertexStartIndex + offsetAndCount[0];
		const uint influenceCount = offsetAndCount[1];

		const VertexData meshData = _DeformedMeshData[deformedMeshVertexIndex];
		float3 pos = meshData.Position;
		float3 nrm = meshData.Normal;
		float3 tan = meshData.Tangent;

		for (uint k = 0; k < influenceCount; ++k)
		{
			const BlendShapeVertexDelta vertexDelta = _BlendShapeVertexDeltas[blendShapeVertexOffset + k];
			const float weight = _BlendShapeWeights[blendShapeWeightOffset + vertexDelta.BlendShapeIndex] / 100.0f;
			pos += vertexDelta.Position * weight;
			nrm += vertexDelta.Normal * weight;
			tan += vertexDelta.Tangent * weight;
		}

		VertexData outVertData = (VertexData)0;
		outVertData.Position = pos;
		outVertData.Normal = nrm;
		outVertData.Tangent = tan;

		_DeformedMeshData[deformedMeshVertexIndex] = outVertData;
	}
}
